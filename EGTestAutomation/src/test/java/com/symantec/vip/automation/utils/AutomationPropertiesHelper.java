package com.symantec.vip.automation.utils;import java.util.Calendar;import java.util.Enumeration;import java.util.HashMap;import java.util.Iterator;import java.util.Map;import java.util.Map.Entry;import java.util.Properties;import java.util.UUID;public class AutomationPropertiesHelper {	Properties properties = AutomationProperties.getInstance().GetAutomationProperties();	Helper helper = new Helper();	Map<String, String> map = new HashMap<String, String>();	public Map<String, String> GetConfiguration() {		// Getting all the properties from properties file....		Enumeration<?> keys = properties.propertyNames();		keys = properties.propertyNames();		while (keys.hasMoreElements()) {			String key = keys.nextElement().toString().trim();			map.put(key.toLowerCase(), properties.getProperty(key));		}		return map;	}	public Map<String, String> GetPartialMap(String keyString) {		Map<String, String> newMap = new HashMap<String, String>();		for (String key : properties.stringPropertyNames()) {			if (key.contains(keyString)) {				newMap.put(key.trim(), (properties.getProperty(key).trim()));			}		}		return newMap;	}	public String GetPropertiesValueByKey(String keyName) {		String value = null;		try {			map = this.GetConfiguration();			Iterator<Entry<String, String>> it = map.entrySet().iterator();			while (it.hasNext()) {				Map.Entry<String, String> pairs = it.next();				if ((pairs.getKey().toString()).contains(keyName)) {					value = pairs.getValue().toString();				}			}		} catch (Exception e) {			//		}		return value;	}	public String GetPropValueByKey(String keyName) {		String value = null;		value = properties.getProperty(keyName).toString().trim();		return value;	}	public Map<String, String> GetCommonPropertiesAndLastStringAsKey(String keyString) {		Map<String, String> newMap = new HashMap<String, String>();		Map<String, String> out = new HashMap<String, String>();		map = this.GetConfiguration();		Iterator<Entry<String, String>> it = map.entrySet().iterator();		while (it.hasNext()) {			Map.Entry<String, String> pairs = it.next();			if ((pairs.getKey().toString()).contains(keyString)) {				newMap.put(pairs.getKey().toString().trim(), pairs.getValue().toString().trim());				// System.out.println(pairs.getKey() + " = " +				// pairs.getValue());			}			for (Map.Entry<String, String> entry : newMap.entrySet()) {				int len = entry.getKey().toString().split("\\.").length;				String key = entry.getKey().toString().split("\\.")[len - 1].trim();				String value = entry.getValue().toString().trim();				out.put(key, value);			}		}		return out;	}	public Map<String, String> GetUserDetails(Map<String, String> map) {		// TestDriverHelper tdh = new TestDriverHelper();		String reqType = map.get("request_type");		String userKey = map.get("user_key");		String userKey1 = userKey;		String domainName = map.get("domain_name");		Map<String, String> userDetails = new HashMap<String, String>();		try {			if (reqType.toLowerCase().contains("pinreset") || (map.get("push-action").equalsIgnoreCase("allow") || map.get("push-action").equalsIgnoreCase("deny"))) {				if (map.get("server_context").toLowerCase().contains("rhel")) {					userKey = userKey + "_rhel";				} else if (map.get("server_context").toLowerCase().contains("windows")) {					userKey = userKey + "_windows";				}			}			String testUserDetails = (this.GetCommonPropertiesAndLastStringAsKey(userKey)).get(userKey);			if (testUserDetails == null) {				testUserDetails = (this.GetCommonPropertiesAndLastStringAsKey(userKey1)).get(userKey1);			}			String userName = testUserDetails.split("\\;")[0];			userDetails.put("user_name", userName);			// logger.info("User name is:"+userName);			userDetails.put("user_ldap_password", testUserDetails.split("\\;")[1]);			userDetails.put("user_otp", testUserDetails.split("\\;")[2]);			userDetails.put("user_pin", testUserDetails.split("\\;")[3]);			Calendar now = Calendar.getInstance();			int second = now.get(Calendar.SECOND);			int milli = now.get(Calendar.MILLISECOND);			String password = "1Password" + String.valueOf(second) + String.valueOf(milli);			userDetails.put("user_ldap_password_new", password);			userDetails.put("user_ldap_password_confirm", password);			userDetails.put("wait_time_before_confirm_password", "1000");			if (reqType.toLowerCase().contains("pinreset")) {				String stringType = (reqType.split("\\:")[1]).toLowerCase();				int length = Integer.parseInt(reqType.split("\\:")[2]);				String newPin;				if (stringType.contains("alphanumeric")) {					newPin = randomStringOfLength(length);				} else {					newPin = createRandomNumber(length);				}				System.out.println("NEW PIN is " + newPin);				userDetails.put("user_pin_new", newPin);				userDetails.put("user_pin_confirm", newPin);				userDetails.put("wait_time_before_confirm_password", "1000");			}			if (reqType.contains("domainformat")) {				userDetails.put("user_name", domainName + "\\" + userName);			} else if (reqType.contains("info")) {				userDetails.put("user_name", userName + "^info");			} else if (reqType.contains("cloudid")) {				String[] reqtypeattributes = helper.splitTestStepAttribute(reqType);				if (reqtypeattributes[1].contains("user")) {					userDetails.put("user_name", userName + "@" + map.get("ldap_fqdn"));				}			}		} catch (Exception e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		return userDetails;	}	public static String randomStringOfLength(int length) {		StringBuffer buffer = new StringBuffer();		while (buffer.length() < length) {			buffer.append(uuidString());		}		// this part controls the length of the returned string		return buffer.substring(0, length);	}	private static String uuidString() {		return UUID.randomUUID().toString().replaceAll("-", "");	}	public final static String createRandomNumber(long len) {		if (len > 18)			throw new IllegalStateException("To many digits");		long tLen = (long) Math.pow(10, len - 1) * 9;		long number = (long) (Math.random() * tLen) + (long) Math.pow(10, len - 1) * 1;		String tVal = number + "";		if (tVal.length() != len) {			throw new IllegalStateException("The random number '" + tVal + "' is not '" + len + "' digits");		}		return tVal;	}}