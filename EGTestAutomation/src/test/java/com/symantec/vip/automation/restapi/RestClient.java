package com.symantec.vip.automation.restapi;import java.lang.reflect.Type;import java.util.HashMap;import java.util.Map;import javax.ws.rs.core.MediaType;import org.apache.log4j.Logger;import com.google.gson.Gson;import com.google.gson.reflect.TypeToken;import com.sun.jersey.api.client.Client;import com.sun.jersey.api.client.ClientResponse;import com.sun.jersey.api.client.WebResource;import com.symantec.vip.automation.eg.radius.FinalResult;public class RestClient {	static Logger logger = Logger.getLogger("VIP_EG_AUTOMATION");	public Map<String, String> PerformRemoteAction(String actionName, Map<String, String> ActionDetails) {		ActionDetails.put("remote_action", actionName);		String serverName = ActionDetails.get("eg_server_host");		Map<String, String> config = new HashMap<String, String>();		// String server = map.get("validation_server_host").toString();		try {			Client client = Client.create();			String url = "http://" + serverName + ":8080/EG_SERVER_AGENT/vipeg/root/PerformRemoteAction";			logger.info("Thread-" + Thread.currentThread().getId() + ": " + "Invoking Remote Action Call for the action " + ActionDetails.get("remote_action"));			logger.info("Thread-" + Thread.currentThread().getId() + ": " + "Invoking REST API: " + url);			WebResource webResource = client.resource(url);			String json = new Gson().toJson(ActionDetails);			logger.info("Thread-" + Thread.currentThread().getId() + ": " + "Required configuration for the remote action is:" + json);			ClientResponse response = webResource.type("application/json").post(ClientResponse.class, json);			if (response.getStatus() != 200) {				logger.info("Thread-" + Thread.currentThread().getId() + ": " + "Failed : HTTP error code : " + response.getStatus());			}			String output = response.getEntity(String.class);			Gson gson = new Gson();			logger.info("Thread-" + Thread.currentThread().getId() + ": " + "Configuration Status received from server is: " + output);			config = gson.fromJson(output, Map.class);		} catch (Exception e) {			logger.info("Thread-" + Thread.currentThread().getId() + ": " + e.getMessage());		}		return config;	}	public Map<Integer, FinalResult> PerformRemoteActionForPerfTest(String actionName, Map<String, String> ActionDetails) {		ActionDetails.put("remote_action", actionName);		String serverName = ActionDetails.get("eg_server_host");		Map<Integer, FinalResult> config = new HashMap<Integer, FinalResult>();		// String server = map.get("validation_server_host").toString();		try {			Client client = Client.create();			String url = "http://" + serverName + ":8080/EG_SERVER_AGENT/vipeg/root/PerformRemoteAction";			logger.info("Thread-" + Thread.currentThread().getId() + ": " + "Invoking Remote Action Call for the action " + ActionDetails.get("remote_action"));			logger.info("Thread-" + Thread.currentThread().getId() + ": " + "Invoking REST API: " + url);			WebResource webResource = client.resource(url);			String json = new Gson().toJson(ActionDetails);			logger.info("Thread-" + Thread.currentThread().getId() + ": " + "Required configuration for the remote action is:" + json);			ClientResponse response = webResource.type("application/json").post(ClientResponse.class, json);			if (response.getStatus() != 200) {				logger.info("Thread-" + Thread.currentThread().getId() + ": " + "Failed : HTTP error code : " + response.getStatus());			}			String output = response.getEntity(String.class);			Gson gson = new Gson();			logger.info("Thread-" + Thread.currentThread().getId() + ": " + "Configuration Status received from server is: " + output);			Type type = new TypeToken<Map<Integer, FinalResult>>() {			}.getType();			config = gson.fromJson(output, type);			// config = gson.fromJson(output, Map.class);		} catch (Exception e) {			logger.info("Thread-" + Thread.currentThread().getId() + ": " + e.getMessage());		}		return config;	}	public static String GetLatestBuildNo(String buildLocation) {		String output = "";		try {			Client client = Client.create();			String url = "http://10.141.16.118:80/EG_SERVER_AGENT/vipeg/root/GetLatestBuildNo?buildpath=" + buildLocation;			logger.info("Thread-" + Thread.currentThread().getId() + ": " + "Invoking API: " + url);			WebResource webResource = client.resource(url);			ClientResponse response = webResource.accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);			output = response.getEntity(String.class);			if (response.getStatus() != 200) {				logger.info("Thread-" + Thread.currentThread().getId() + ": " + "Failed : HTTP error code : " + response.getStatus());			}			// String output = response.getEntity(String.class);			logger.info("Thread-" + Thread.currentThread().getId() + ": " + "Getting configuration from server ");		} catch (Exception e) {			// e.printStackTrace();			logger.error("Thread-" + Thread.currentThread().getId() + ": " + "Failed to get the configuration from the server ");		}		return output;	}}