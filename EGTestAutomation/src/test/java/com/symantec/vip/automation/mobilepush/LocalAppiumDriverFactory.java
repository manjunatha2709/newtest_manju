package com.symantec.vip.automation.mobilepush;import java.net.MalformedURLException;import java.net.URL;import org.apache.log4j.Logger;import org.openqa.selenium.remote.DesiredCapabilities;import com.symantec.vip.automation.utils.AutomationPropertiesHelper;import io.appium.java_client.AppiumDriver;import io.appium.java_client.android.AndroidDriver;import io.appium.java_client.ios.IOSDriver;class LocalAppiumDriverFactory {	static AutomationPropertiesHelper tcph = new AutomationPropertiesHelper();	Logger logger = Logger.getLogger("VIP_EG_AUTOMATION");	public AppiumDriver createInstance(String deviceNo, String os) {		AppiumDriver driver = null;		String deviceUDID = tcph.GetPropertiesValueByKey(os + ".udid.device" + deviceNo);		// String version = tcph.GetPropertiesValueByKey(os+".version." +		// deviceUDID);		String path = tcph.GetPropertiesValueByKey(os + ".build.path");		String appiumHostIP = tcph.GetPropertiesValueByKey("appium.hostip");		String deviceName = tcph.GetPropertiesValueByKey(os + ".device" + deviceNo + ".name");		String platfromName;		String deviceVersion = tcph.GetPropertiesValueByKey(os + ".device" + deviceNo + ".version");		boolean android = false;		if (os.equalsIgnoreCase("android")) {			android = true;			platfromName = "Android";			deviceVersion = path = path + "/app.apk";		} else {			platfromName = "iOS";			String deviceType = tcph.GetPropertiesValueByKey("ios.device" + deviceNo + ".type");			path = path + "/" + deviceType.toLowerCase() + "/app.ipa";		}		try {			DesiredCapabilities capabilities = new DesiredCapabilities();			capabilities.setCapability("app", path);			capabilities.setCapability("noReset", true);			capabilities.setCapability("platformVersion", deviceVersion);			// dCap.setCapability("platformName", "iOS");			// dCap.setCapability("app", configuration.get("local_build") + "/"			// + iosSubPath + "/" + IOS_APP_NAME);			// capabilities.setCapability("platformVersion", version);			capabilities.setCapability("platformName", platfromName);			if (android) {				capabilities.setCapability("appPackage", "com.verisign.mvip.main");			}			capabilities.setCapability("deviceName", deviceName);			capabilities.setCapability("udid", deviceUDID);			capabilities.setCapability("autoAcceptAlerts", true);			capabilities.setCapability("newCommandTimeout", 120);			capabilities.setCapability("noReset", true);			capabilities.setCapability("autoAcceptAlerts", true);			logger.info("Thread-" + Thread.currentThread().getId() + ": " + "Initiating Appium Driver, Capabilities are: \n" + capabilities.toString());			if (os.equalsIgnoreCase("android")) {				if (deviceNo.equals("1")) {					logger.info("Thread-" + Thread.currentThread().getId() + ": " + "Create Android Session: URL is " + "http://" + appiumHostIP + ":4998/wd/hub");					driver = new AndroidDriver(new URL("http://" + appiumHostIP + ":4998/wd/hub"), capabilities);				} else {					logger.info("Thread-" + Thread.currentThread().getId() + ": " + "Create Android Session: URL is " + "http://" + appiumHostIP + ":4999/wd/hub");					driver = new AndroidDriver(new URL("http://" + appiumHostIP + ":4999/wd/hub"), capabilities);				}			} else {				if (deviceNo.equals("1")) {					logger.info("Thread-" + Thread.currentThread().getId() + ": " + "Create IOS Session: URL is " + "http://" + appiumHostIP + ":4998/wd/hub");					driver = new IOSDriver(new URL("http://" + appiumHostIP + ":4998/wd/hub"), capabilities);				} else {					logger.info("Thread-" + Thread.currentThread().getId() + ": " + "Create IOS Session: URL is " + "http://" + appiumHostIP + ":4999/wd/hub");					driver = new IOSDriver(new URL("http://" + appiumHostIP + ":4999/wd/hub"), capabilities);				}			}		} catch (MalformedURLException e) {			e.printStackTrace();		}		return driver;	}}