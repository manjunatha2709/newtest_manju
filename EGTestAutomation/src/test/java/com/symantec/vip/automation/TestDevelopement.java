package com.symantec.vip.automation;import java.io.IOException;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;import java.util.HashMap;import java.util.Properties;import org.openqa.selenium.By;import org.testng.annotations.AfterClass;import org.testng.annotations.BeforeClass;import org.testng.annotations.BeforeMethod;import org.testng.annotations.BeforeSuite;import org.testng.annotations.Parameters;import org.testng.annotations.Test;import com.symantec.vip.automation.eg.radius.RadiusTestHelper;import com.symantec.vip.automation.eg.radius.TestBed;import com.symantec.vip.automation.utils.TestDriverHelper;import com.symantec.vip.soapclient.VIPServicesSoapClient;import com.symantec.vip.soapclient.VIPWebServicesProperties;import com.symantec.vip.soapclient.WSThread;import com.verisign.sharedtoken.Status;import com.verisign.webserviceclient.WebServiceClient;import com.verisign.webserviceclient.WebServiceClientException;public class TestDevelopement {	SeleniumTestHelper sTestHelper = new SeleniumTestHelper();	TestDriverHelper tdh = new TestDriverHelper();	RadiusTestHelper radiusTestHelper = new RadiusTestHelper();	@Test	public void GenerateBuldTempOTP() throws Exception {		final int totalUserCount = 120001;		final int transactionPerSecond = 20;		final String expirationDate = "23-12-2016 10:20:56";		String userPrefix = "perfuser";		try {			for (int j = 0; j < totalUserCount; j++) {				WSThread wThread = new WSThread();				wThread.generateTempOTP(userPrefix + j, "123456", "production", expirationDate);				Thread t = new Thread(wThread);				t.setName("WS" + Thread.currentThread().getName());				t.start();				if (j % transactionPerSecond == 0) {					System.out.println("Sleeping for 1 second");					Thread.sleep(1000);				}			}		} catch (Exception e) {			// logger.error(e.getMessage());			e.printStackTrace();			System.exit(-1);		}	}	//	// @BeforeClass	// public void setVIPEnvironment() throws Exception {	// config.putAll(aph.GetCommonPropertiesAndLastStringAsKey("common.prop."));	// config.put("selected_env", "production");	// config.putAll(testDriverHelper.getVIPServicesEnvironment(config));	// VIPServicesSoapClient.generateTempOTP("bobby", "494949",	// config.get("selected_env"));	// VIPServicesSoapClient.generateTempOTP("ssppwd", "494949",	// config.get("selected_env"));	// VIPServicesSoapClient.generateTempOTP("autoèéëùúüà", "494949",	// config.get("selected_env"));	// VIPServicesSoapClient.generateTempOTP("autoË.Reqñ", "494949",	// config.get("selected_env"));	// VIPServicesSoapClient.generateTempOTP("arjunmurthywithslash", "494949",	// config.get("selected_env"));	// VIPServicesSoapClient.generateTempOTP("arjunmurthywithslash@xuv.prupleclub.europe.internal",	// "494949", config.get("selected_env"));	// VIPServicesSoapClient.generateTempOTP("tan.bobby", "494949",	// config.get("selected_env"));	// VIPServicesSoapClient.generateTempOTP("tan_bobby", "494949",	// config.get("selected_env"));	// VIPServicesSoapClient.generateTempOTP("t", "494949",	// config.get("selected_env"));	// VIPServicesSoapClient.generateTempOTP("bobby3pwd", "494949",	// config.get("selected_env"));	// VIPServicesSoapClient.generateTempOTP("cn_comma_slash_user", "494949",	// config.get("selected_env"));	// VIPServicesSoapClient.generateTempOTP("arjunmurthywithcomma", "494949",	// config.get("selected_env"));	// VIPServicesSoapClient.generateTempOTP("pmuther", "494949",	// config.get("selected_env"));	// }	// @BeforeMethod	// public void ConfigConsoleBasicLogin() throws Exception {	// sTestHelper.ConfigConsoleBasicLogin(config, driver);	// }	//	// @Test(priority = 0)	// public void AddVIPCertificate_FirstTime() throws Exception {	// HashMap<String, String> configuration = new HashMap<String, String>();	// configuration.putAll(config);	// logger.info("Thread-" + Thread.currentThread().getId() + ": " +	// "**********Configuration for this test is**********" + configuration);	// sTestHelper.AddVIPCertificate_FirstTime(configuration, driver);	// }	//	// @BeforeClass	// public void setVIPEnvironment() throws Exception {	// config.putAll(aph.GetCommonPropertiesAndLastStringAsKey("common.prop."));	// config.put("selected_env", "production");	// config.putAll(testDriverHelper.getVIPServicesEnvironment(config));	// VIPServicesSoapClient.generateTempOTP("bobby", "494949",	// config.get("selected_env"));	// VIPServicesSoapClient.generateTempOTP("ssppwd", "494949",	// config.get("selected_env"));	// VIPServicesSoapClient.generateTempOTP("autoèéëùúüà", "494949",	// config.get("selected_env"));	// VIPServicesSoapClient.generateTempOTP("autoË.Reqñ", "494949",	// config.get("selected_env"));	// VIPServicesSoapClient.generateTempOTP("arjunmurthywithslash", "494949",	// config.get("selected_env"));	// VIPServicesSoapClient.generateTempOTP("arjunmurthywithslash@xuv.prupleclub.europe.internal",	// "494949", config.get("selected_env"));	// VIPServicesSoapClient.generateTempOTP("tan.bobby", "494949",	// config.get("selected_env"));	// VIPServicesSoapClient.generateTempOTP("tan_bobby", "494949",	// config.get("selected_env"));	// VIPServicesSoapClient.generateTempOTP("t", "494949",	// config.get("selected_env"));	// VIPServicesSoapClient.generateTempOTP("bobby3pwd", "494949",	// config.get("selected_env"));	// VIPServicesSoapClient.generateTempOTP("cn_comma_slash_user", "494949",	// config.get("selected_env"));	// VIPServicesSoapClient.generateTempOTP("arjunmurthywithcomma", "494949",	// config.get("selected_env"));	// VIPServicesSoapClient.generateTempOTP("pmuther", "494949",	// config.get("selected_env"));	// }	//	// //	// // @Test(dataProviderClass = DataProvider.class, dataProvider =	// // "SSPIDPLoginDiffDN", groups = { "baseconfig", "SanityTests",	// // "RegressionTests" }, priority = 5, dependsOnMethods = {	// // "AddVIPCertificate_FirstTime" })	// // public void	// //	// SSP_Login_by_configuring_different_BindDN_in_UserstoreDiffDN(HashMap<String,	// // String> configuration) throws Exception {	// // configuration.putAll(config);	// // logger.info("Thread-" + Thread.currentThread().getId() + ": " +	// // "**********Configuration for this test is**********" + configuration);	// // sTestHelper.DeleteUserStore(configuration, driver);	// // sTestHelper.CreateUserStore(configuration, driver);	// // sTestHelper.ImportSSLCertificate(configuration, driver);	// // sTestHelper.SSPIdpConfigrationSetup(configuration, driver);	// // sTestHelper.StartSSPIDPService(driver,	// // Boolean.valueOf(configuration.get("expected_result_sspidp")));	// // sTestHelper.LoginToSSPSAMLSuccessCheck(configuration, driver);	// // }	// //	// // // @Test(dataProviderClass = DataProvider.class, dataProvider =	// // // "createBasicApplicationAwareValidationServer", groups = {	// // "SanityTests",	// // // "RegressionTests" })	// // // public void	// // //	// Verify_OTP_authentication_on_all_application_servers(HashMap<String,	// // // String> configuration) throws Exception {	// // // configuration.putAll(config);	// // // configuration.put("test_scenario",	// // // "Verify_OTP_authentication_to_all_application_servers");	// // // configuration.put("user_name", "bobby");	// // // configuration.put("user_ldap_password", "1Password");	// // // configuration.put("user_otp", "494949");	// // // configuration.put("user_pin", "123456");	// // // configuration.put("expected-return-packet-type", "access-accept");	// // // configuration.put("expected-return-code", "0");	// // // logger.info("Thread-" + Thread.currentThread().getId() + ": " +	// // // "**********Configuration for this test is**********" +	// configuration);	// // // sTestHelper.CheckAndConfigureValidationServer(configuration,	// driver);	// // // // radiusTestHelper.InvokeRadiusTests(configuration);	// // // sTestHelper.DeleteValidaitonServer(driver,	// // // configuration.get("validation_server_name"));	// // // }	// // // @Test(dataProviderClass = DataProvider.class, priority = 1,	// // dataProvider	// // // = "postImportULOPush", groups = { "RegressionTests" })	// // // public void	// Post_Import_ULO_Push_All_Validation_Tests(HashMap<String,	// // // String> configuration) throws Exception {	// // // configuration.putAll(config);	// // // logger.info("Thread-" + Thread.currentThread().getId() + ": " +	// // // "**********Configuration for this test is**********" +	// configuration);	// // // if (tdh.isSupportedVersion(configuration)) {	// // // radiusTestHelper.InvokeRadiusTests(configuration);	// // // }	// // // }	// // @Test(dataProviderClass = DataProvider.class, priority = 1,	// dataProvider	// // = "postImportUOPush", groups = { "RegressionTests" })	// // public void Post_Import_UO_Push_All_Validation_Tests(HashMap<String,	// // String> configuration) throws Exception {	// // configuration.putAll(config);	// // logger.info("Thread-" + Thread.currentThread().getId() + ": " +	// // "**********Configuration for this test is**********" + configuration);	// // if (tdh.isSupportedVersion(configuration)) {	// // Thread.sleep(15000);	// // radiusTestHelper.InvokeRadiusTests(configuration);	// // }	// // }	// @Test(dataProviderClass = DataProvider.class, dataProvider =	// "ConfigureConsoleAuthenticate", groups = { "baseconfig", "SanityTests",	// "RegressionTests" }, priority = 5, dependsOnMethods = {	// "AddVIPCertificate_FirstTime" })	// public void	// Console_Authentication_by_configuring_different_bindDN_in_UserstoreDiffDN(HashMap<String,	// String> configuration) throws Exception {	// configuration.putAll(config);	// logger.info("Thread-" + Thread.currentThread().getId() + ": " +	// "**********Configuration for this test is**********" + configuration);	// sTestHelper.DeleteUserStore(configuration, driver);	// sTestHelper.CreateUserStore(configuration, driver);	// sTestHelper.ConfigureConsoleAuthentication(configuration, driver);	// sTestHelper.ConfigureConsoleAuthenticationLoginFlow(configuration,	// driver);	// }}