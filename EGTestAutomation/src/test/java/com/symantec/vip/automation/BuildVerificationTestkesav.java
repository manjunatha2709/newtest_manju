package com.symantec.vip.automation;import java.util.HashMap;import org.testng.annotations.BeforeMethod;import org.testng.annotations.BeforeSuite;import org.testng.annotations.Test;import com.symantec.vip.automation.utils.TestDriverHelper;public class BuildVerificationTestkesav extends TestBase {	SeleniumTestHelper sTestHelper = new SeleniumTestHelper();	TestDriverHelper tdh = new TestDriverHelper();	@BeforeSuite	public void generateTempOTP() throws Exception {		//tdh.setTempOTP(config);	}	@BeforeMethod	public void ConfigConsoleBasicLogin() throws Exception {		sTestHelper.ConfigConsoleBasicLogin(config, driver);	}	@Test(dataProviderClass = DataProvider.class, dataProvider = "BVT_ConfigureConsoleAuthenticate", groups = { "SanityTests", "RegressionTests" })	public void ConsoleAuthentication_Login(HashMap<String, String> configuration) throws Exception {		configuration.putAll(config);		logger.info("Thread-" + Thread.currentThread().getId() + ": " + "**********Configuration for this test is**********" + configuration);		sTestHelper.ConfigureConsoleAuthentication(configuration, driver);		sTestHelper.ConfigureConsoleAuthenticationLoginFlow(configuration, driver);	}	@Test(dataProviderClass = DataProvider.class, dataProvider = "BVT_CreateUserStoreDiffDN", groups = { "baseconfig", "SanityTests", "RegressionTests" })	public void SSP_IDP_Login_With_SSL(HashMap<String, String> configuration) throws Exception {		configuration.putAll(config);		logger.info("Thread-" + Thread.currentThread().getId() + ": " + "**********Configuration for this test is**********" + configuration);		configuration.put("enable_mobile", "true");		configuration.put("enable_phone", "true");		configuration.put("enable_email", "true");		sTestHelper.configureOOBAttributesInUserStore(driver, configuration);		sTestHelper.ImportSSLCertificate(configuration, driver);		sTestHelper.SSPIdpConfigrationSetup(configuration, driver);		sTestHelper.StartSSPIDPService(driver, Boolean.valueOf(configuration.get("expected_result_sspidp")));		sTestHelper.LoginToSSP(configuration, driver);	}		@Test(dataProviderClass = DataProvider.class, dataProvider = "BVT_VIPAdministratorConfigWithDiffDNUserStore", groups = { "baseconfig", "SanityTests", "RegressionTests" })	public void Start_LDAP_Directory_Sync_Service_By_Enabling_Admin_User_Sync(HashMap<String, String> configuration) throws Exception {		configuration.putAll(config);		logger.info("Thread-" + Thread.currentThread().getId() + ": " + "**********Configuration for this test is**********" + configuration);		sTestHelper.ConfigureLDAPSync(configuration, driver);		sTestHelper.StopLDAPSyncService(configuration, driver);		sTestHelper.StartLDAPSyncService(configuration, driver);	}		@Test(dataProviderClass = DataProvider.class, dataProvider = "UpdateValidationServerUO", groups = { "baseconfig", "SanityTests", "RegressionTests" })	public void UpdateValidationServerUO(HashMap<String, String> configuration) throws Exception {		configuration.putAll(config);		logger.info("Thread-" + Thread.currentThread().getId() + ": " + "**********Configuration for this test is**********" + configuration);		sTestHelper.createValidationServer(configuration, driver);		sTestHelper.UpdateValidationServer(configuration, driver);		sTestHelper.StartValidationServer(configuration, driver);	}	@Test(dataProviderClass = DataProvider.class, dataProvider = "BVT_VIPAdministratorConfigWithDiffDNUserStore", groups = { "baseconfig", "SanityTests", "RegressionTests" })	public void VIP_Manager_IDP_Configuration_With_SSL(HashMap<String, String> configuration) throws Exception {		configuration.putAll(config);		logger.info("Thread-" + Thread.currentThread().getId() + ": " + "**********Configuration for this test is**********" + configuration);		sTestHelper.VIPManagerIdpConfigration(configuration, driver);		sTestHelper.StopVIPManagerIDPService(configuration, driver);		// VIPIDP0003		sTestHelper.StartVIPManagerIDPService(configuration, driver);	}		/*	@Test(priority = 0)	public void AddVIPCertificate_FirstTime() throws Exception {		HashMap<String, String> configuration = new HashMap<String, String>();		configuration.putAll(config);		logger.info("Thread-" + Thread.currentThread().getId() + ": " + "**********Configuration for this test is**********" + configuration);		sTestHelper.AddVIPCertificate_FirstTime(configuration, driver);	}	@Test(dataProviderClass = DataProvider.class, groups = { "SanityTests", "RegressionTests" }, priority = 0)	public void Copy_Right_Information_on_Home_Page() throws Exception {		HashMap<String, String> configuration = new HashMap<String, String>();		configuration.putAll(config);		logger.info("Thread-" + Thread.currentThread().getId() + ": " + "**********Configuration for this test is**********" + configuration);		sTestHelper.verifyCopyRightInformation(driver, configuration);	}	@Test(dataProviderClass = DataProvider.class, groups = { "SanityTests", "RegressionTests" }, priority = 0)	public void Product_Version_on_Home_Page() throws Exception {		HashMap<String, String> configuration = new HashMap<String, String>();		configuration.putAll(config);		logger.info("Thread-" + Thread.currentThread().getId() + ": " + "**********Configuration for this test is**********" + configuration);		sTestHelper.verifyProductVersion(driver, configuration);	}	@Test(dataProviderClass = DataProvider.class, groups = { "SanityTests", "RegressionTests" }, priority = 0)	public void Platform_Type_on_Home_Page() throws Exception {		HashMap<String, String> configuration = new HashMap<String, String>();		configuration.putAll(config);		logger.info("Thread-" + Thread.currentThread().getId() + ": " + "**********Configuration for this test is**********" + configuration);		sTestHelper.verifyOSPlatform(driver, configuration);	}	@Test(priority = 0, dataProviderClass = DataProvider.class, dataProvider = "BVTCeateUserStoreBasic", groups = { "baseconfig", "SanityTests", "RegressionTests" }, dependsOnMethods = { "add_TrustedRoot_Certificate_AD2008R2" })	public void Create_Userstore_basic_scenarios(HashMap<String, String> configuration) throws Exception {		configuration.putAll(config);		logger.info("Thread-" + Thread.currentThread().getId() + ": " + "**********Configuration for this test is**********" + configuration);		sTestHelper.CreateUserStore(configuration, driver);	}	@Test(dataProviderClass = DataProvider.class, dataProvider = "BVTCreateValidationServerBasic", groups = { "baseconfig", "SanityTests", "RegressionTests" }, dependsOnMethods = { "Create_Userstore_basic_scenarios" })	public void Create_Validation_Server_Basic_Scenarios(HashMap<String, String> configuration) throws Exception {		configuration.putAll(config);		logger.info("Thread-" + Thread.currentThread().getId() + ": " + "**********Configuration for this test is**********" + configuration);		sTestHelper.createValidationServer(configuration, driver);	}	@Test(groups = { "baseconfig", "SanityTests", "RegressionTests" })	public void add_TrustedRoot_Certificate_AD2008R2() throws Exception {		HashMap<String, String> configuration = new HashMap<String, String>();		configuration.putAll(config);		logger.info("Thread-" + Thread.currentThread().getId() + ": " + "**********Configuration for this test is**********" + configuration);		configuration.put("userstore_name", "ad2008r2");		configuration.put("expected_result", "true");		sTestHelper.AddTrustedCACertificate(configuration, driver);	}	@Test(dataProviderClass = DataProvider.class, dataProvider = "UpdateValidationServerUO", groups = { "baseconfig", "SanityTests", "RegressionTests" }, dependsOnMethods = { "Create_Userstore_basic_scenarios" })	public void UpdateValidationServerUO(HashMap<String, String> configuration) throws Exception {		configuration.putAll(config);		logger.info("Thread-" + Thread.currentThread().getId() + ": " + "**********Configuration for this test is**********" + configuration);		sTestHelper.createValidationServer(configuration, driver);		sTestHelper.UpdateValidationServer(configuration, driver);		sTestHelper.StartValidationServer(configuration, driver);	}	@Test(dataProviderClass = DataProvider.class, dataProvider = "AddSSLCertificate", groups = { "baseconfig", "SanityTests", "RegressionTests" })	public void AddSSLCertificate(HashMap<String, String> configuration) throws Exception {		configuration.putAll(config);		logger.info("Thread-" + Thread.currentThread().getId() + ": " + "**********Configuration for this test is**********" + configuration);		sTestHelper.ImportSSLCertificate(configuration, driver);		sTestHelper.CheckSSLCertAdded(configuration, driver);		sTestHelper.DeleteSSLCertificate(configuration, driver);	}	@Test(dataProviderClass = DataProvider.class, dataProvider = "AddTunnelReceiverWithSSLCert", groups = { "baseconfig", "SanityTests", "RegressionTests" })	public void CheckSSLCertInTunnelReceiver(HashMap<String, String> configuration) throws Exception {		configuration.putAll(config);		logger.info("Thread-" + Thread.currentThread().getId() + ": " + "**********Configuration for this test is**********" + configuration);		sTestHelper.ImportSSLCertificate(configuration, driver);		sTestHelper.AddTunnelReceiver(configuration, driver);		sTestHelper.CheckSSLCertDetailsInTunnelReceiver(configuration, driver);	}	@Test(dataProviderClass = DataProvider.class, dataProvider = "BVT_ConfigureConsoleAuthenticate", groups = { "SanityTests", "RegressionTests" })	public void ConsoleAuthentication_Login(HashMap<String, String> configuration) throws Exception {		configuration.putAll(config);		logger.info("Thread-" + Thread.currentThread().getId() + ": " + "**********Configuration for this test is**********" + configuration);		sTestHelper.ConfigureConsoleAuthentication(configuration, driver);		sTestHelper.ConfigureConsoleAuthenticationLoginFlow(configuration, driver);	}	@Test(dataProviderClass = DataProvider.class, dataProvider = "BVT_ConsoleSettingHTTPSLogin", groups = { "baseconfig", "SanityTests", "RegressionTests" }, dependsOnMethods = { "Create_Userstore_basic_scenarios" })	public void Console_Authentication_SSL_Login_As_Builtin_User(HashMap<String, String> configuration) throws Exception {		configuration.putAll(config);		logger.info("Thread-" + Thread.currentThread().getId() + ": " + "**********Configuration for this test is**********" + configuration);		sTestHelper.ImportSSLCertificate(configuration, driver);		sTestHelper.ConsoleSettings_HTTPS_Login(configuration, driver);		sTestHelper.ConfigConsoleBasicLogin(configuration, driver);		sTestHelper.Disable_HTTPS_ConsoleSetting(configuration, driver);	}	@Test(dataProviderClass = DataProvider.class, dataProvider = "BVT_AddTunnelForwarderWithSSLCert", groups = { "baseconfig", "SanityTests", "RegressionTests" })	public void Add_Tunnel_Forwarder(HashMap<String, String> configuration) throws Exception {		configuration.putAll(config);		logger.info("Thread-" + Thread.currentThread().getId() + ": " + "**********Configuration for this test is**********" + configuration);		sTestHelper.ImportSSLCertificate(configuration, driver);		sTestHelper.AddTunnelForwarder(configuration, driver);	}	@Test(dataProviderClass = DataProvider.class, dataProvider = "BVT_VIPAdministratorConfigWithDiffDNUserStore", groups = { "baseconfig", "SanityTests", "RegressionTests" }, dependsOnMethods = { "VIP_Manager_IDP_Configuration_With_SSL" })	public void VIP_Manager_IDP_Login_With_SSL(HashMap<String, String> configuration) throws Exception {		configuration.putAll(config);		logger.info("Thread-" + Thread.currentThread().getId() + ": " + "**********Configuration for this test is**********" + configuration);		// sTestHelper.DeleteUserStore(configuration, driver);		// sTestHelper.CreateUserStore(configuration, driver);		// sTestHelper.ImportSSLCertificate(configuration, driver);		// // VIPADM001		// sTestHelper.VIPAdministratorConfigration(configuration, driver);		// VIPIDP0001		// sTestHelper.VIPManagerIdpConfigration(configuration, driver);		// VIPIDP0002		// VIPIDP0004		sTestHelper.LoginToVIPMGR(configuration, driver);	}	@Test(dataProviderClass = DataProvider.class, dataProvider = "BVT_VIPAdministratorConfigWithDiffDNUserStore", groups = { "baseconfig", "SanityTests", "RegressionTests" }, dependsOnMethods = { "Configure_VIP_Administrator" })	public void VIP_Manager_IDP_Configuration_With_SSL(HashMap<String, String> configuration) throws Exception {		configuration.putAll(config);		logger.info("Thread-" + Thread.currentThread().getId() + ": " + "**********Configuration for this test is**********" + configuration);		sTestHelper.VIPManagerIdpConfigration(configuration, driver);		sTestHelper.StopVIPManagerIDPService(configuration, driver);		// VIPIDP0003		sTestHelper.StartVIPManagerIDPService(configuration, driver);	}	@Test(dataProviderClass = DataProvider.class, dataProvider = "BVT_VIPAdministratorConfigWithDiffDNUserStore", groups = { "baseconfig", "SanityTests", "RegressionTests" }, dependsOnMethods = { "Create_Userstore_basic_scenarios" })	public void Configure_VIP_Administrator(HashMap<String, String> configuration) throws Exception {		configuration.putAll(config);		logger.info("Thread-" + Thread.currentThread().getId() + ": " + "**********Configuration for this test is**********" + configuration);		sTestHelper.ImportSSLCertificate(configuration, driver);		sTestHelper.VIPAdministratorConfigration(configuration, driver);	}	@Test(dataProviderClass = DataProvider.class, dataProvider = "BVT_VIPAdministratorConfigWithDiffDNUserStore", groups = { "baseconfig", "SanityTests", "RegressionTests" }, dependsOnMethods = { "Configure_VIP_Administrator" })	public void Configure_VIP_Admin_Group_Mapping(HashMap<String, String> configuration) throws Exception {		configuration.putAll(config);		logger.info("Thread-" + Thread.currentThread().getId() + ": " + "**********Configuration for this test is**********" + configuration);		sTestHelper.ConfigureVIPAdminGroupMappingAndAttributes(configuration, driver);	}	@Test(dataProviderClass = DataProvider.class, dataProvider = "BVT_VIPAdministratorConfigWithDiffDNUserStore", groups = { "baseconfig", "SanityTests", "RegressionTests" }, dependsOnMethods = { "Configure_VIP_Admin_Group_Mapping" })	public void Start_LDAP_Directory_Sync_Service_By_Enabling_Admin_User_Sync(HashMap<String, String> configuration) throws Exception {		configuration.putAll(config);		logger.info("Thread-" + Thread.currentThread().getId() + ": " + "**********Configuration for this test is**********" + configuration);		sTestHelper.ConfigureLDAPSync(configuration, driver);		sTestHelper.StopLDAPSyncService(configuration, driver);		sTestHelper.StartLDAPSyncService(configuration, driver);	}	@Test(dataProviderClass = DataProvider.class, dataProvider = "BVT_CreateUserStoreDiffDN", groups = { "baseconfig", "SanityTests", "RegressionTests" })	public void SSP_IDP_Login_With_SSL(HashMap<String, String> configuration) throws Exception {		configuration.putAll(config);		logger.info("Thread-" + Thread.currentThread().getId() + ": " + "**********Configuration for this test is**********" + configuration);		configuration.put("enable_mobile", "true");		configuration.put("enable_phone", "true");		configuration.put("enable_email", "true");		sTestHelper.configureOOBAttributesInUserStore(driver, configuration);		sTestHelper.ImportSSLCertificate(configuration, driver);		sTestHelper.SSPIdpConfigrationSetup(configuration, driver);		sTestHelper.StartSSPIDPService(driver, Boolean.valueOf(configuration.get("expected_result_sspidp")));		sTestHelper.LoginToSSP(configuration, driver);	}	*/}