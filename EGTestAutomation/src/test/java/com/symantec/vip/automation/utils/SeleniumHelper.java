package com.symantec.vip.automation.utils;import java.io.PrintWriter;import java.io.StringWriter;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.concurrent.TimeUnit;import org.openqa.selenium.By;import org.openqa.selenium.UnexpectedAlertBehaviour;import org.openqa.selenium.WebDriver;import org.openqa.selenium.WebElement;import org.openqa.selenium.chrome.ChromeOptions;import org.openqa.selenium.firefox.FirefoxDriver;import org.openqa.selenium.firefox.FirefoxProfile;import org.openqa.selenium.remote.CapabilityType;import org.openqa.selenium.remote.DesiredCapabilities;import org.openqa.selenium.support.ui.Select;public class SeleniumHelper {	protected String Stack2string(Throwable e) {		try {			StringWriter sw = new StringWriter();			PrintWriter pw = new PrintWriter(sw);			e.printStackTrace(pw);			return "------\r\n" + sw.toString() + "------\r\n";		} catch (Exception e2) {			return "bad stack2string";		}	}	public String MakeURL(String protocol, String hostname, String port) {		String url = "";		if (protocol.equalsIgnoreCase("http")) {			url = protocol + "://" + hostname + ":" + port;		} else {			url = "https://" + hostname + ":" + port;		}		return url;	}	public boolean isElementPresent(WebDriver driver, By locator) {		driver.manage().timeouts().implicitlyWait(2, TimeUnit.SECONDS);		try {			driver.findElement(locator);			driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);			return true;		} catch (Exception e) {			driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);			return false;		}	}	public boolean isElementPresent(WebDriver driver, WebElement we) {		driver.manage().timeouts().implicitlyWait(2, TimeUnit.SECONDS);		// WebDriverWait wdWait = new WebDriverWait(driver, 2);		try {			if (we.isDisplayed()) {				driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);				return true;			} else {				driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);				return false;			}		} catch (Exception e) {			driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);			return false;		}	}	protected enum Browser {		FIREFOX, CHROME, IE, ANDROID, HTMLUNIT;	}	protected enum ValidationMode {		UO, UPO, ULO, UOL, ULUO, ULOPUSH, UOLPUSH;	}	protected void selectValueFromDropDownList(WebDriver driver, String optionToSelect, WebElement we) {		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);		Select dropdown = new Select(we);		List<WebElement> options = dropdown.getOptions();		for (WebElement option : options) {			if ((option.getText()).equalsIgnoreCase(optionToSelect)) {				option.click();				break;			}		}	}	protected enum LoggingLevel {		DEBUG, INFO, ERROR;	}	public synchronized static DesiredCapabilities getCapabilites(String browserName) {		DesiredCapabilities cap = null;		if (browserName.toLowerCase().contains("firefox")) {			FirefoxProfile fp = new FirefoxProfile();			cap = DesiredCapabilities.firefox();			cap.setCapability(FirefoxDriver.PROFILE, fp);		} else if (browserName.toLowerCase().contains("ie")) {			cap = DesiredCapabilities.firefox();		} else if (browserName.toLowerCase().contains("chrome")) {			System.setProperty("webdriver.chrome.driver", "D:\\jenkins\\drivers\\chromedriver.exe");			// ChromeOptions options = new ChromeOptions();			Map<String, Object> options = new HashMap<String, Object>();			options.put("binary", "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe");			cap = DesiredCapabilities.chrome();			cap.setCapability(ChromeOptions.CAPABILITY, options);			cap.setCapability(CapabilityType.UNEXPECTED_ALERT_BEHAVIOUR, UnexpectedAlertBehaviour.ACCEPT);		} else {			FirefoxProfile fp = new FirefoxProfile();			cap = DesiredCapabilities.firefox();			cap.setCapability(FirefoxDriver.PROFILE, fp);		}		return cap;	}}