package com.symantec.vip.automation.eg.radius;import java.util.HashMap;import java.util.Map;import java.util.Properties;import org.apache.log4j.Logger;import com.symantec.vip.automation.ldap.LDAPHelper;import com.symantec.vip.automation.restapi.RestClient;import com.symantec.vip.automation.utils.AutomationProperties;public class TestBed {	// Map<String, Boolean> ServerMandatorySetupStatus = new HashMap<String,	// Boolean>();	Logger logger = Logger.getLogger("VIP_EG_AUTOMATION");	RestClient ent = new RestClient();	Properties properties = AutomationProperties.getInstance().GetAutomationProperties();	public void ConfigureJettyForCodeCoverage(Map<String, String> testParamForThisTest) {		// logger.info("Thread-" + Thread.currentThread().getId() + ": " +		// ("Checking whether Code coverage configuration is required on this server"));		// String server =		// testParamForThisTest.get("validation_server_host").toString();		// String codeCoverageServerWindows =		// properties.getProperty("hostname.ui.windows_cc").trim();		// String codeCoverageServerLinux =		// properties.getProperty("hostname.ui.linux_cc").trim();		// if (server.equals(codeCoverageServerWindows) ||		// server.equals(codeCoverageServerLinux)) {		// logger.info("Thread-" + Thread.currentThread().getId() + ": " +		// "Configuring Jetty for code coverage");		// ent.PerformRemoteAction("ConfigureJettyForConfigConsoleCodeCoverage",		// testParamForThisTest);		// } else {		// logger.info("Thread-" + Thread.currentThread().getId() + ": " +		// "No code coverage configuration required");		// }	}	public void changeAuthURL(Map<String, String> testParamForThisTest) {		logger.info("Thread-" + Thread.currentThread().getId() + ": " + ("Checking whether Authentication URL needs to be changed"));		String env = testParamForThisTest.get("selected_env");		if (env.equalsIgnoreCase("qa")) {			logger.info("Thread-" + Thread.currentThread().getId() + ": " + "Invoking request to change validation authentication URL to " + env);			ent.PerformRemoteAction("ChangeAuthenticationURL", testParamForThisTest);		} else {			logger.info("Thread-" + Thread.currentThread().getId() + ": " + "No need to change the auth URL as selected environment is " + env);		}	}	public void ConfigureVIPMGRJettyForCodeCoverage(Map<String, String> testParamForThisTest) {		// logger.info("Thread-" + Thread.currentThread().getId() + ": " +		// ("Checking whether Code coverage configuration is required on this server for VIP MGR IDP"));		// String server =		// testParamForThisTest.get("validation_server_host").toString();		// String codeCoverageServerWindows =		// properties.getProperty("hostname.ui.windows_cc").trim();		// String codeCoverageServerLinux =		// properties.getProperty("hostname.ui.linux_cc").trim();		// if (server.equals(codeCoverageServerWindows) ||		// server.equals(codeCoverageServerLinux)) {		// logger.info("Thread-" + Thread.currentThread().getId() + ": " +		// "Configuring Jetty for code coverage for VIP MGR IDP");		// ent.PerformRemoteAction("ConfigureJettyForVIPMGRCodeCoverage",		// testParamForThisTest);		// } else {		// logger.info("Thread-" + Thread.currentThread().getId() + ": " +		// "No code coverage configuration required");		// }	}	public void ConfigureSSPJettyForCodeCoverage(Map<String, String> testParamForThisTest) {		// logger.info("Thread-" + Thread.currentThread().getId() + ": " +		// ("Checking whether Code coverage configuration is required on this server for SSP IDP"));		// String server =		// testParamForThisTest.get("validation_server_host").toString();		// String codeCoverageServerWindows =		// properties.getProperty("hostname.ui.windows_cc").trim();		// String codeCoverageServerLinux =		// properties.getProperty("hostname.ui.linux_cc").trim();		// if (server.equals(codeCoverageServerWindows) ||		// server.equals(codeCoverageServerLinux)) {		// logger.info("Thread-" + Thread.currentThread().getId() + ": " +		// "Configuring Jetty for code coverage for SSP IDP");		// ent.PerformRemoteAction("ConfigureJettyForSSPCodeCoverage",		// testParamForThisTest);		// } else {		// logger.info("Thread-" + Thread.currentThread().getId() + ": " +		// "No code coverage configuration required");		// }	}	public boolean resetPassword(Map<String, String> config) throws Exception {		LDAPHelper adc = new LDAPHelper();		boolean result = false;		logger.info("Thread-" + Thread.currentThread().getId() + ": " + "Resetting the original password ");		result = adc.updatePassword(config);		logger.info("Thread-" + Thread.currentThread().getId() + ": " + "Returned the result: "+result);		return result;	}	public void disableAutoBCEnvironmentConfiguration(Map<String, String> map) {		String actualServer = map.get("validation_server_host");		try {			logger.info("Thread-" + Thread.currentThread().getId() + ": " + "Disabling the DNS entries which points the user-services environment to wrong IP");			Map<String, String> RemoteActionConfiguration = new HashMap<String, String>();			RemoteActionConfiguration = map;			RemoteActionConfiguration.put("validation_server_host", properties.getProperty("tomcat.unique.action.server_ip").trim());			ent.PerformRemoteAction("DeleteDNSEntries", RemoteActionConfiguration);			// uith.InvokeUserInterfactTests(map, "AddProxySettings");		} catch (Exception e) {			logger.info("Thread-" + Thread.currentThread().getId() + ": " + (Thread.currentThread().getStackTrace()[1].getMethodName()) + "An exception occured: Here is the exception\n"				+ e.getMessage());		} finally {			map.put("validation_server_host", actualServer);		}	}	public void enableAutoBCEnvironmentConfiguration(Map<String, String> map) {		String actualServer = map.get("validation_server_host");		try {			logger.info("Thread-" + Thread.currentThread().getId() + ": " + "Configuring DNS environment to point user-services environment to wrong IP");			String bcTestReq = map.get("bc_mode");			Map<String, String> RemoteActionConfiguration = new HashMap<String, String>();			if (bcTestReq.equalsIgnoreCase("auto")) {				RemoteActionConfiguration = map;				RemoteActionConfiguration.put("validation_server_host", properties.getProperty("tomcat.unique.action.server_ip").trim());				ent.PerformRemoteAction("AddDNSEntries", RemoteActionConfiguration);				map.put("validation_server_host", actualServer);			}		} catch (Exception e) {			logger.info("Thread-" + Thread.currentThread().getId() + ": " + (Thread.currentThread().getStackTrace()[1].getMethodName()) + "An exception occured: Here is the exception\n"				+ e.getMessage());		} finally {			map.put("validation_server_host", actualServer);		}	}	public void prepareForPasswordManagement(Map<String, String> config) throws Exception {		LDAPHelper adc = new LDAPHelper();		adc.updateAttribute(config, "pwdLastSet", "0");	}}